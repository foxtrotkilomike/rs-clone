{"version":3,"file":"constructor.bundle.js","mappings":"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","sources":["webpack://my-webpack-project/./src/features/burgerMenu.ts","webpack://my-webpack-project/./src/helpers/createElementWithClass.ts","webpack://my-webpack-project/./src/constants.ts","webpack://my-webpack-project/./src/config/api.config.js","webpack://my-webpack-project/./src/helpers/manageUserName.ts","webpack://my-webpack-project/./src/helpers/loginFormHandlers.ts","webpack://my-webpack-project/./src/features/tabs.ts","webpack://my-webpack-project/./src/features/popup.ts","webpack://my-webpack-project/./src/pages/constructor/index.ts"],"sourcesContent":["const burgerBtn = document.querySelector('.burger') as HTMLElement;\nconst menu = document.querySelector('.navbar__list') as HTMLElement;\nconst menuLinks = [...document.querySelectorAll('.nav__link')] as HTMLElement[];\n\nexport const burgerMenu = () => {\n  burgerBtn.addEventListener('click', () => {\n    burgerBtn.classList.toggle('burger_open');\n    menu.classList.toggle('navbar__list_open');\n  });\n\n  menuLinks.forEach((el: HTMLElement) => {\n    el.addEventListener('click', () => {\n      burgerBtn.classList.remove('burger_open');\n      menu.classList.remove('navbar__list_open');\n    });\n  });\n};\n","function createElemWithClass(tagName: string, ...classNames: string[]): HTMLElement {\n  const createdElement = document.createElement(tagName);\n  createdElement.classList.add(...classNames);\n\n  return createdElement;\n}\n\nexport default createElemWithClass;\n","//TODO: MOCK_INGREDIENTS have to be replaced by ingredients from DB\nexport const MOCK_INGREDIENTS = [\n  'apple',\n  'banana',\n  'tangerine',\n  'lemon',\n  'beef',\n  'citric acid',\n  'baking soda',\n  'pineapple',\n  'flour',\n  'onion',\n  'mango',\n  'rice',\n  'pasta',\n  'buckwheat',\n  'lemongrass',\n].sort();\n\nexport const EMPTY_MESSAGE = \"You haven't added anything yet...\";\n","const BASE_URL = 'https://rs-recipes-server.herokuapp.com';\n// const BASE_URL = 'http://localhost:3000';\n\nconst ENDPOINTS = {\n  recipes: '/recipes',\n  recipesDistinctProps: '/recipes/distinct',\n  articles: '/articles',\n  userRegister: '/user/register',\n  userLogin: '/user/login',\n  userLogout: '/user/logout',\n  userProfile: '/user/profile',\n  userUpdate: '/user/update',\n};\n\nexport { BASE_URL, ENDPOINTS };\n","function getUserName() {\n  (document.querySelector('#user-name') as HTMLElement).textContent = window.localStorage.userName || 'User';\n}\n\nfunction setUserName(userName: string) {\n  window.localStorage.userName = userName;\n  (document.querySelector('#user-name') as HTMLElement).textContent = userName;\n}\n\nexport { getUserName, setUserName };\n","import getCookieValue from './getCookieValue';\nimport { BASE_URL, ENDPOINTS } from '../config/api.config';\nimport { IUserResponse } from '../types';\nimport { setUserName } from './manageUserName';\n\nfunction setLocalUser(response: IUserResponse) {\n  window.localStorage.setItem('user', JSON.stringify(response));\n}\n\nfunction addUserButtonListener() {\n  const userProfileButton = document.querySelector('.profile-btn') as HTMLButtonElement;\n  const signupForm = document.querySelector('.popup') as HTMLElement;\n\n  userProfileButton.addEventListener('click', async () => {\n    // const tokenValue = getCookieValue('token');\n    const tokenValue = localStorage.getItem('token');\n\n    if (tokenValue) {\n      const response = (await fetch(`${BASE_URL}${ENDPOINTS.userProfile}`, {\n        credentials: 'include',\n      })) as IUserResponse;\n      if (response.status === 200) {\n        const responseBody = (await response.json()) as IUserResponse;\n        setLocalUser(responseBody);\n        window.open('./user-page.html', '_self');\n      } else {\n        signupForm.classList.add('is-open');\n      }\n    } else {\n      signupForm.classList.add('is-open');\n    }\n  });\n}\n\nfunction addRegisterFormListener() {\n  const form = document.forms[1] as HTMLFormElement;\n  form.addEventListener('submit', handleRegistrationForm);\n}\n\nfunction addSignInFormListener() {\n  const form = document.forms[0] as HTMLFormElement;\n  form.addEventListener('submit', handleLoginForm);\n}\n\nasync function handleRegistrationForm(event: Event) {\n  event.preventDefault();\n  const formElement = event.target as HTMLFormElement;\n  const formData = serializeRegistrationForm(event.target as HTMLFormElement);\n\n  if (formData !== undefined) {\n    const response = await sendUserData(formData, ENDPOINTS.userRegister);\n    if (response.status === 400) {\n      (formElement.querySelector('#user-exist') as HTMLElement).classList.remove('hidden');\n    } else {\n      (document.querySelector('.popup') as HTMLElement).classList.remove('is-open');\n      alert('Registered successfully!');\n      localStorage.setItem('token', 'true');\n      formElement.reset();\n      const responseBody = (await response.json()) as IUserResponse;\n      setLocalUser(responseBody);\n      setUserName(responseBody.name);\n    }\n  }\n}\n\nasync function handleLoginForm(event: Event) {\n  event.preventDefault();\n  const formElement = event.target as HTMLFormElement;\n  const formData = serializeLoginForm(event.target as HTMLFormElement);\n\n  const response = await sendUserData(formData, ENDPOINTS.userLogin);\n  switch (response.status) {\n    case 401:\n      (formElement.querySelector('#wrong-password') as HTMLElement).classList.remove('hidden');\n      (formElement.querySelector('#user-not-found') as HTMLElement).classList.add('hidden');\n      break;\n    case 404:\n    case 500:\n      (formElement.querySelector('#user-not-found') as HTMLElement).classList.remove('hidden');\n      (formElement.querySelector('#wrong-password') as HTMLElement).classList.add('hidden');\n      break;\n    case 200: {\n      (document.querySelector('.popup') as HTMLElement).classList.remove('is-open');\n      alert('Logged in successfully!');\n      localStorage.setItem('token', 'true');\n      formElement.reset();\n      const responseBody = (await response.json()) as IUserResponse;\n      setLocalUser(responseBody);\n      setUserName(responseBody.name);\n    }\n  }\n}\n\nfunction serializeRegistrationForm(formNode: HTMLFormElement): FormData | undefined {\n  const password = formNode.password.value;\n  const passwordConfirm = formNode['password-confirm'].value;\n  if (password !== passwordConfirm) {\n    (formNode.querySelector('#password-mismatch') as HTMLElement).classList.remove('hidden');\n  } else {\n    (formNode.querySelector('#password-mismatch') as HTMLFormElement).classList.add('hidden');\n    (formNode.querySelector('#user-exist') as HTMLFormElement).classList.add('hidden');\n    return new FormData(formNode);\n  }\n}\n\nfunction serializeLoginForm(formNode: HTMLFormElement): FormData {\n  return new FormData(formNode);\n}\n\nasync function sendUserData(data: FormData, endpoint: string): Promise<IUserResponse> {\n  return (await fetch(`${BASE_URL}${endpoint}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    credentials: 'include',\n    body: JSON.stringify(Object.fromEntries(data.entries())),\n  })) as IUserResponse;\n}\n\nexport { addUserButtonListener, addRegisterFormListener, addSignInFormListener };\n","export const tabHandler = (id: string): void => {\n  const tabNavs: NodeListOf<HTMLElement> = (document.getElementById(id) as HTMLElement).querySelectorAll(\n    '.tabs-nav__item'\n  );\n  const tabContents: NodeListOf<HTMLElement> = (document.getElementById(id) as HTMLElement).querySelectorAll(\n    '.tabs-content__item'\n  );\n  let activeTabName = '';\n\n  tabNavs.forEach(element => element.addEventListener('click', e => setActiveTab(e)));\n  const showActiveTabContent = (tabname: string): void => {\n    tabContents.forEach(element => {\n      element.getAttribute('data-tab-content') === tabname\n        ? element.classList.add('is-active')\n        : element.classList.remove('is-active');\n    });\n  };\n  const setActiveTab = (e: Event): void => {\n    e.preventDefault();\n    tabNavs.forEach(element => element.classList.remove('is-active'));\n    const activeTab = (e.target as HTMLElement).classList.contains('tabs-nav__item')\n      ? (e.target as HTMLElement)\n      : (e.target as HTMLElement).closest('.tabs-nav__item');\n    activeTab?.classList.add('is-active');\n    tabContents.forEach(element => element.classList.remove('is-active'));\n    activeTabName = activeTab?.getAttribute('data-tab-name') as string;\n    showActiveTabContent(activeTabName);\n  };\n};\n","const popupHandler = () => {\n  const underlayer = document.querySelector('.popup__body');\n  underlayer?.addEventListener('click', closeParentPopup);\n};\n\nconst closeParentPopup = (e: Event) => {\n  if (e.target instanceof HTMLElement && !e.target?.closest('.popup__content')) {\n    e.target.closest('.popup')?.classList.remove('is-open');\n  }\n};\n\nexport default popupHandler;\n","import { burgerMenu } from '../../features/burgerMenu';\nimport createElemWithClass from '../../helpers/createElementWithClass';\nimport '../../styles/main.scss';\nimport { EMPTY_MESSAGE, MOCK_INGREDIENTS } from '../../constants';\nimport * as formHandler from '../../helpers/loginFormHandlers';\nimport { getUserName } from '../../helpers/manageUserName';\nimport { tabHandler } from '../../features/tabs';\nimport popupHandler from '../../features/popup';\n\nlet dropdownIngredients = MOCK_INGREDIENTS;\n\nconst constructorInput = document.getElementById('constructor-input') as HTMLInputElement;\nconst dropdownMenu = document.querySelector('.ingredient-options') as HTMLElement;\nconst optionsHolder = document.getElementById('relevant-options') as HTMLElement;\nconst chosenIngredientsBox = document.getElementById('chosen-ingredients') as HTMLElement;\nconst boxEmptyMessageElement = document.getElementById('is-empty-message') as HTMLElement;\nboxEmptyMessageElement.innerText = EMPTY_MESSAGE;\n\nburgerMenu();\nshowBoxIsEmptyMessage();\ngetUserName();\n\nchosenIngredientsBox.addEventListener('click', e => {\n  const target = e.target as HTMLElement;\n  if (target.classList.contains('constructor-ingredient__delete')) {\n    const chosenElem = (e.target as HTMLElement).closest('.constructor-ingredient');\n    if (chosenElem) {\n      removeIngredientFromChosen(chosenElem);\n      addIngredientToOptions(chosenElem);\n    }\n  }\n\n  if (chosenIngredientsBox.querySelectorAll('.constructor-ingredient').length === 0) {\n    showBoxIsEmptyMessage();\n  } else {\n    removeBoxIsEmptyMessage();\n  }\n});\n\nconstructorInput.addEventListener('click', () => {\n  renderIngredientOptions(dropdownIngredients);\n  dropdownMenu.classList.add('is-active');\n});\n\nconstructorInput.addEventListener('input', () => {\n  dropdownMenu.classList.add('is-active');\n  const relevantIngredients = filterOptions(dropdownIngredients, constructorInput.value.trim().toLocaleLowerCase());\n  relevantIngredients.length ? renderIngredientOptions(relevantIngredients) : renderMessage('Sorry, nothing matches');\n});\n\ndocument.body.addEventListener('click', e => {\n  const target = e.target as HTMLElement;\n  if (!target.classList.contains('ingredient-options__item') && target.id !== 'constructor-input') {\n    dropdownMenu.classList.remove('is-active');\n  }\n});\n\nconstructorInput.addEventListener('keypress', e => {\n  if (e.key === 'Enter') {\n    moveIngredientToChosen(constructorInput.value);\n  }\n});\n\noptionsHolder.addEventListener('click', e => {\n  const target = e.target as HTMLElement;\n  if (target.classList.contains('ingredient-options__item')) {\n    moveIngredientToChosen(target.innerText);\n  }\n});\n\nfunction renderIngredientOptions(options: string[]): void {\n  optionsHolder.innerHTML = '';\n  options.forEach(item => {\n    const listElem = createElemWithClass('li', 'ingredient-options__item');\n    listElem.id = item;\n    listElem.innerText = item;\n    optionsHolder.append(listElem);\n  });\n}\n\nfunction renderMessage(message: string): void {\n  optionsHolder.innerText = message;\n}\n\nrenderIngredientOptions(MOCK_INGREDIENTS);\n\nfunction filterOptions(options: string[], value: string) {\n  return options.filter(item => item.includes(value));\n}\n\nfunction addIngredientToChosen(ingredient: string): void {\n  const ingredientEl = createElemWithClass('div', 'constructor-ingredients__item', 'constructor-ingredient');\n  ingredientEl.innerHTML = `\n    <span class=\"constructor-ingredient__name\">${ingredient}</span>\n    <div class=\"constructor-ingredient__delete\"></div>\n  `;\n  chosenIngredientsBox.append(ingredientEl);\n}\n\nfunction moveIngredientToChosen(str: string): void {\n  const ingredient = str.trim().toLowerCase();\n  if (MOCK_INGREDIENTS.includes(ingredient)) {\n    addIngredientToChosen(ingredient);\n    removeBoxIsEmptyMessage();\n  }\n  dropdownIngredients = dropdownIngredients.filter(item => item !== ingredient);\n  constructorInput.value = '';\n  renderIngredientOptions(dropdownIngredients);\n  constructorInput.focus();\n}\n\nfunction removeIngredientFromChosen(elem: Element): void {\n  chosenIngredientsBox.removeChild(elem);\n}\n\nfunction addIngredientToOptions(elem: Element): void {\n  const chosenElemName = (elem.querySelector('.constructor-ingredient__name') as HTMLElement).innerText;\n  dropdownIngredients.push(chosenElemName);\n  dropdownIngredients.sort();\n}\n\nfunction showBoxIsEmptyMessage() {\n  boxEmptyMessageElement.classList.remove('hidden');\n}\n\nfunction removeBoxIsEmptyMessage() {\n  boxEmptyMessageElement.classList.add('hidden');\n}\n\npopupHandler();\ntabHandler('forms-container');\nformHandler.addUserButtonListener();\nformHandler.addRegisterFormListener();\nformHandler.addSignInFormListener();\n"],"names":["burgerBtn","document","querySelector","menu","menuLinks","querySelectorAll","tagName","classNames","createdElement","createElement","classList","add","MOCK_INGREDIENTS","sort","BASE_URL","setUserName","userName","window","localStorage","textContent","setLocalUser","response","setItem","JSON","stringify","async","sendUserData","data","endpoint","fetch","method","headers","credentials","body","Object","fromEntries","entries","closeParentPopup","e","target","HTMLElement","closest","remove","dropdownIngredients","constructorInput","getElementById","dropdownMenu","optionsHolder","chosenIngredientsBox","boxEmptyMessageElement","renderIngredientOptions","options","innerHTML","forEach","item","listElem","id","innerText","append","moveIngredientToChosen","str","ingredient","trim","toLowerCase","includes","ingredientEl","addIngredientToChosen","removeBoxIsEmptyMessage","filter","value","focus","showBoxIsEmptyMessage","addEventListener","toggle","el","contains","chosenElem","elem","removeChild","chosenElemName","push","addIngredientToOptions","length","relevantIngredients","toLocaleLowerCase","key","tabNavs","tabContents","activeTabName","element","setActiveTab","preventDefault","activeTab","tabname","getAttribute","tabHandler","userProfileButton","signupForm","getItem","status","json","open","forms","event","formElement","formData","formNode","password","FormData","serializeRegistrationForm","undefined","alert","reset","responseBody","name"],"sourceRoot":""}