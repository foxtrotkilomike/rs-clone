{"version":3,"file":"constructor.bundle.js","mappings":"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","sources":["webpack://my-webpack-project/./src/features/burgerMenu.ts","webpack://my-webpack-project/./src/helpers/createElementWithClass.ts","webpack://my-webpack-project/./src/constants.ts","webpack://my-webpack-project/./src/config/api.config.js","webpack://my-webpack-project/./src/helpers/manageUserName.ts","webpack://my-webpack-project/./src/helpers/loginFormHandlers.ts","webpack://my-webpack-project/./src/pages/constructor/index.ts","webpack://my-webpack-project/./src/helpers/getCookieValue.ts"],"sourcesContent":["const burgerBtn = document.querySelector('.burger') as HTMLElement;\nconst menu = document.querySelector('.navbar__list') as HTMLElement;\nconst menuLinks = [...document.querySelectorAll('.nav__link')] as HTMLElement[];\n\nexport const burgerMenu = () => {\n  burgerBtn.addEventListener('click', () => {\n    burgerBtn.classList.toggle('burger_open');\n    menu.classList.toggle('navbar__list_open');\n  });\n\n  menuLinks.forEach((el: HTMLElement) => {\n    el.addEventListener('click', () => {\n      burgerBtn.classList.remove('burger_open');\n      menu.classList.remove('navbar__list_open');\n    });\n  });\n};\n","function createElemWithClass(tagName: string, ...classNames: string[]): HTMLElement {\n  const createdElement = document.createElement(tagName);\n  createdElement.classList.add(...classNames);\n\n  return createdElement;\n}\n\nexport default createElemWithClass;\n","//TODO: MOCK_INGREDIENTS have to be replaced by ingredients from DB\nexport const MOCK_INGREDIENTS = [\n  'apple',\n  'banana',\n  'tangerine',\n  'lemon',\n  'beef',\n  'citric acid',\n  'baking soda',\n  'pineapple',\n  'flour',\n  'onion',\n  'mango',\n  'rice',\n  'pasta',\n  'buckwheat',\n  'lemongrass',\n].sort();\n\nexport const EMPTY_MESSAGE = \"You haven't added anything yet...\";\n","const BASE_URL = 'https://rs-recipes-server.herokuapp.com';\n\nconst ENDPOINTS = {\n  recipes: '/recipes',\n  recipesDistinctProps: '/recipes/distinct',\n  articles: '/articles',\n  userRegister: '/user/register',\n  userLogin: '/user/login',\n  userLogout: '/user/logout',\n  userProfile: '/user/profile',\n  userUpdate: '/user/update',\n};\n\nexport { BASE_URL, ENDPOINTS };\n","function getUserName() {\n  (document.querySelector('#user-name') as HTMLElement).textContent = window.localStorage.userName || 'User';\n}\n\nfunction setUserName(userName: string) {\n  window.localStorage.userName = userName;\n  (document.querySelector('#user-name') as HTMLElement).textContent = userName;\n}\n\nexport { getUserName, setUserName };\n","import getCookieValue from './getCookieValue';\nimport { BASE_URL, ENDPOINTS } from '../config/api.config';\nimport { IUserResponse } from '../types';\nimport { setUserName } from './manageUserName';\n\nfunction setLocalUser(response: IUserResponse) {\n  window.localStorage.setItem('user', JSON.stringify(response));\n}\n\nfunction addUserButtonListener() {\n  const userProfileButton = document.querySelector('.profile-btn') as HTMLButtonElement;\n  const signupForm = document.querySelector('.popup') as HTMLElement;\n\n  userProfileButton.addEventListener('click', async () => {\n    const tokenValue = getCookieValue('token');\n\n    if (tokenValue) {\n      const response = (await fetch(`${BASE_URL}${ENDPOINTS.userProfile}`, {\n        credentials: 'include',\n      })) as IUserResponse;\n      if (response.status === 200) {\n        const responseBody = (await response.json()) as IUserResponse;\n        setLocalUser(responseBody);\n        window.open('./user-page.html', '_self');\n      } else {\n        signupForm.classList.add('is-open');\n      }\n    } else {\n      signupForm.classList.add('is-open');\n    }\n  });\n}\n\nfunction addRegisterFormListener() {\n  const form = document.forms[1] as HTMLFormElement;\n  form.addEventListener('submit', handleRegistrationForm);\n}\n\nfunction addSignInFormListener() {\n  const form = document.forms[0] as HTMLFormElement;\n  form.addEventListener('submit', handleLoginForm);\n}\n\nasync function handleRegistrationForm(event: Event) {\n  event.preventDefault();\n  const formElement = event.target as HTMLFormElement;\n  const formData = serializeRegistrationForm(event.target as HTMLFormElement);\n\n  if (formData !== undefined) {\n    const response = await sendUserData(formData, ENDPOINTS.userRegister);\n    if (response.status === 400) {\n      (formElement.querySelector('#user-exist') as HTMLElement).classList.remove('hidden');\n    } else {\n      (document.querySelector('.popup') as HTMLElement).classList.remove('is-open');\n      alert('Registered successfully!');\n      formElement.reset();\n      const responseBody = (await response.json()) as IUserResponse;\n      setLocalUser(responseBody);\n      setUserName(responseBody.name);\n    }\n  }\n}\n\nasync function handleLoginForm(event: Event) {\n  event.preventDefault();\n  const formElement = event.target as HTMLFormElement;\n  const formData = serializeLoginForm(event.target as HTMLFormElement);\n\n  const response = await sendUserData(formData, ENDPOINTS.userLogin);\n  switch (response.status) {\n    case 401:\n      (formElement.querySelector('#wrong-password') as HTMLElement).classList.remove('hidden');\n      (formElement.querySelector('#user-not-found') as HTMLElement).classList.add('hidden');\n      break;\n    case 404:\n    case 500:\n      (formElement.querySelector('#user-not-found') as HTMLElement).classList.remove('hidden');\n      (formElement.querySelector('#wrong-password') as HTMLElement).classList.add('hidden');\n      break;\n    case 200: {\n      (document.querySelector('.popup') as HTMLElement).classList.remove('is-open');\n      alert('Logged in successfully!');\n      formElement.reset();\n      const responseBody = (await response.json()) as IUserResponse;\n      setLocalUser(responseBody);\n      setUserName(responseBody.name);\n    }\n  }\n}\n\nfunction serializeRegistrationForm(formNode: HTMLFormElement): FormData | undefined {\n  const password = formNode.password.value;\n  const passwordConfirm = formNode['password-confirm'].value;\n  if (password !== passwordConfirm) {\n    (formNode.querySelector('#password-mismatch') as HTMLElement).classList.remove('hidden');\n  } else {\n    (formNode.querySelector('#password-mismatch') as HTMLFormElement).classList.add('hidden');\n    (formNode.querySelector('#user-exist') as HTMLFormElement).classList.add('hidden');\n    return new FormData(formNode);\n  }\n}\n\nfunction serializeLoginForm(formNode: HTMLFormElement): FormData {\n  return new FormData(formNode);\n}\n\nasync function sendUserData(data: FormData, endpoint: string): Promise<IUserResponse> {\n  return (await fetch(`${BASE_URL}${endpoint}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    credentials: 'include',\n    body: JSON.stringify(Object.fromEntries(data.entries())),\n  })) as IUserResponse;\n}\n\nexport { addUserButtonListener, addRegisterFormListener, addSignInFormListener };\n","import { burgerMenu } from '../../features/burgerMenu';\nimport createElemWithClass from '../../helpers/createElementWithClass';\nimport '../../styles/main.scss';\nimport { EMPTY_MESSAGE, MOCK_INGREDIENTS } from '../../constants';\nimport * as formHandler from '../../helpers/loginFormHandlers';\nimport { getUserName } from '../../helpers/manageUserName';\n\nlet dropdownIngredients = MOCK_INGREDIENTS;\n\nconst constructorInput = document.getElementById('constructor-input') as HTMLInputElement;\nconst dropdownMenu = document.querySelector('.ingredient-options') as HTMLElement;\nconst optionsHolder = document.getElementById('relevant-options') as HTMLElement;\nconst chosenIngredientsBox = document.getElementById('chosen-ingredients') as HTMLElement;\nconst boxEmptyMessageElement = document.getElementById('is-empty-message') as HTMLElement;\nboxEmptyMessageElement.innerText = EMPTY_MESSAGE;\n\nburgerMenu();\nshowBoxIsEmptyMessage();\ngetUserName();\n\nchosenIngredientsBox.addEventListener('click', e => {\n  const target = e.target as HTMLElement;\n  if (target.classList.contains('constructor-ingredient__delete')) {\n    const chosenElem = (e.target as HTMLElement).closest('.constructor-ingredient');\n    if (chosenElem) {\n      removeIngredientFromChosen(chosenElem);\n      addIngredientToOptions(chosenElem);\n    }\n  }\n\n  if (chosenIngredientsBox.querySelectorAll('.constructor-ingredient').length === 0) {\n    showBoxIsEmptyMessage();\n  } else {\n    removeBoxIsEmptyMessage();\n  }\n});\n\nconstructorInput.addEventListener('click', () => {\n  renderIngredientOptions(dropdownIngredients);\n  dropdownMenu.classList.add('is-active');\n});\n\nconstructorInput.addEventListener('input', () => {\n  dropdownMenu.classList.add('is-active');\n  const relevantIngredients = filterOptions(dropdownIngredients, constructorInput.value.trim().toLocaleLowerCase());\n  relevantIngredients.length ? renderIngredientOptions(relevantIngredients) : renderMessage('Sorry, nothing matches');\n});\n\ndocument.body.addEventListener('click', e => {\n  const target = e.target as HTMLElement;\n  if (!target.classList.contains('ingredient-options__item') && target.id !== 'constructor-input') {\n    dropdownMenu.classList.remove('is-active');\n  }\n});\n\nconstructorInput.addEventListener('keypress', e => {\n  if (e.key === 'Enter') {\n    moveIngredientToChosen(constructorInput.value);\n  }\n});\n\noptionsHolder.addEventListener('click', e => {\n  const target = e.target as HTMLElement;\n  if (target.classList.contains('ingredient-options__item')) {\n    moveIngredientToChosen(target.innerText);\n  }\n});\n\nfunction renderIngredientOptions(options: string[]): void {\n  optionsHolder.innerHTML = '';\n  options.forEach(item => {\n    const listElem = createElemWithClass('li', 'ingredient-options__item');\n    listElem.id = item;\n    listElem.innerText = item;\n    optionsHolder.append(listElem);\n  });\n}\n\nfunction renderMessage(message: string): void {\n  optionsHolder.innerText = message;\n}\n\nrenderIngredientOptions(MOCK_INGREDIENTS);\n\nfunction filterOptions(options: string[], value: string) {\n  return options.filter(item => item.includes(value));\n}\n\nfunction addIngredientToChosen(ingredient: string): void {\n  const ingredientEl = createElemWithClass('div', 'constructor-ingredients__item', 'constructor-ingredient');\n  ingredientEl.innerHTML = `\n    <span class=\"constructor-ingredient__name\">${ingredient}</span>\n    <div class=\"constructor-ingredient__delete\"></div>\n  `;\n  chosenIngredientsBox.append(ingredientEl);\n}\n\nfunction moveIngredientToChosen(str: string): void {\n  const ingredient = str.trim().toLowerCase();\n  if (MOCK_INGREDIENTS.includes(ingredient)) {\n    addIngredientToChosen(ingredient);\n    removeBoxIsEmptyMessage();\n  }\n  dropdownIngredients = dropdownIngredients.filter(item => item !== ingredient);\n  constructorInput.value = '';\n  renderIngredientOptions(dropdownIngredients);\n  constructorInput.focus();\n}\n\nfunction removeIngredientFromChosen(elem: Element): void {\n  chosenIngredientsBox.removeChild(elem);\n}\n\nfunction addIngredientToOptions(elem: Element): void {\n  const chosenElemName = (elem.querySelector('.constructor-ingredient__name') as HTMLElement).innerText;\n  dropdownIngredients.push(chosenElemName);\n  dropdownIngredients.sort();\n}\n\nfunction showBoxIsEmptyMessage() {\n  boxEmptyMessageElement.classList.remove('hidden');\n}\n\nfunction removeBoxIsEmptyMessage() {\n  boxEmptyMessageElement.classList.add('hidden');\n}\n\nformHandler.addUserButtonListener();\nformHandler.addRegisterFormListener();\nformHandler.addSignInFormListener();\n","function getCookieValue(cookieKey: string) {\n  return document.cookie\n    .split('; ')\n    .find(cookie => cookie.startsWith(`${cookieKey}=`))\n    ?.split('=')[1];\n}\n\nexport default getCookieValue;\n"],"names":["burgerBtn","document","querySelector","menu","menuLinks","querySelectorAll","tagName","classNames","createdElement","createElement","classList","add","MOCK_INGREDIENTS","sort","BASE_URL","setUserName","userName","window","localStorage","textContent","setLocalUser","response","setItem","JSON","stringify","async","sendUserData","data","endpoint","fetch","method","headers","credentials","body","Object","fromEntries","entries","dropdownIngredients","constructorInput","getElementById","dropdownMenu","optionsHolder","chosenIngredientsBox","boxEmptyMessageElement","renderIngredientOptions","options","innerHTML","forEach","item","listElem","id","innerText","append","moveIngredientToChosen","str","ingredient","trim","toLowerCase","includes","ingredientEl","addIngredientToChosen","removeBoxIsEmptyMessage","filter","value","focus","showBoxIsEmptyMessage","remove","addEventListener","toggle","el","e","target","contains","chosenElem","closest","elem","removeChild","chosenElemName","push","addIngredientToOptions","length","relevantIngredients","toLocaleLowerCase","key","userProfileButton","signupForm","cookieKey","cookie","split","find","startsWith","status","json","open","forms","event","preventDefault","formElement","formData","formNode","password","FormData","serializeRegistrationForm","undefined","alert","reset","responseBody","name"],"sourceRoot":""}